#!/usr/bin/env bash

set -o errexit
set -o errtrace

confighome="${XDG_CONFIG_HOME:-$HOME/.config}"
confighome="$confighome/kali-libvirt"

vm_cpus='2'
vm_memory='3072'

if [[ -f "$confighome/env" ]]; then
	# shellcheck source=/dev/null
	source "$confighome/env"
fi

datahome="${XDG_DATA_HOME:-$HOME/.local/share}"
datahome="$datahome/kali-libvirt"

archive_url='https://cdimage.kali.org/current/'
checksum_url="$archive_url/SHA256SUMS"

vm_name='kali'
ifname='virbr0'
share="$(realpath "$datahome/shared")"
cdrom="$(realpath "$datahome/kali.iso")"
macaddress='52:54:00:08:f9:e8'
netstatus="/var/lib/libvirt/dnsmasq/$ifname.status"

ssh_username='kali'
ssh_password='kali'

_setup_directories() {
	if ! [ -d "$datahome" ]; then
		mkdir -p "$datahome"
	fi

	if ! [ -d "$share" ]; then
		mkdir -p "$share"
	fi

	chmod 770 "$share"
}

_get_ipaddress() {
	jq \
		--raw-output \
		".[] | select(.\"mac-address\"==\"$macaddress\") | .\"ip-address\"" \
		"$netstatus"
}

_send_key() {
	virsh send-key "$vm_name" "$@"
}

_restart_ssh() {
	printf "%s\n" 'Switching to command line...'
	_send_key KEY_LEFTCTRL KEY_LEFTALT KEY_F1
	printf "%s\n" 'Restarting SSH daemon on guest...'
	sleep 1
	_send_key KEY_S
	_send_key KEY_U
	_send_key KEY_D
	_send_key KEY_O
	_send_key KEY_SPACE
	_send_key KEY_S
	_send_key KEY_Y
	_send_key KEY_S
	_send_key KEY_T
	_send_key KEY_E
	_send_key KEY_M
	_send_key KEY_C
	_send_key KEY_T
	_send_key KEY_L
	_send_key KEY_SPACE
	_send_key KEY_R
	_send_key KEY_E
	_send_key KEY_S
	_send_key KEY_T
	_send_key KEY_A
	_send_key KEY_R
	_send_key KEY_T
	_send_key KEY_SPACE
	_send_key KEY_S
	_send_key KEY_S
	_send_key KEY_H
	_send_key KEY_ENTER
	_send_key KEY_LEFTCTRL KEY_LEFTALT KEY_F7
	sleep 1
}

# See [0] for more information.
# [0] https://www.linux-kvm.org/page/9p_virtio
_setup_share() {
	local guestip

	guestip="$(_get_ipaddress)"

	if [ -z "$guestip" ]; then
		printf "%s\n" "IP address not found, is the domain up?" >&2
		return 1
	fi

	printf "%s\n" "Connecting to $guestip..."

	local keymap
	keymap="$(\
		localectl status \
		| grep -i 'X11 Layout' \
		| cut -d ':' -f 2 \
	)"

	local hostip
	hostip="$(\
		ip addr show dev $ifname \
		| awk '/inet/ {print $2}' \
		| cut -d/ -f1 \
	)"

	printf "%s\n" 'Setting up shared directory...'

	sshpass -p "$ssh_password" ssh \
		-o UserKnownHostsFile=/dev/null \
		-o StrictHostKeyChecking=no \
		"$ssh_username@$guestip" <<-EOF
			sudo su -c 'mkdir /shared
			mount -t 9p -o trans=virtio,version=9p2000.L /shared /shared
			sudo iptables -A INPUT -s $hostip -p tcp --dport 22 -j ACCEPT
			sudo iptables -A INPUT -p tcp --dport 22 -j DROP'
			DISPLAY=:0 xrandr --size 1920x1080
			DISPLAY=:0 setxkbmap $keymap
			touch ~/.hushlogin
		EOF
}

cmd_install() {
	virt-install \
		--connect qemu:///session \
		--name "$vm_name" \
		--memory "$vm_memory" \
		--vcpus "$vm_cpus" \
		--cpu host \
		--cdrom "$cdrom" \
		--boot cdrom \
		--os-variant debian10 \
		--nodisks \
		--filesystem "mode=mapped,source=$share,target=/shared" \
		--virt-type kvm \
		--network "bridge=$ifname,mac.address=$macaddress" \
		--noautoconsole
	sleep 1
	_send_key KEY_ENTER
	printf "%s\n" 'Waiting for the machine to boot completely...'
	sleep 20
	_restart_ssh
	_setup_share
}

_download_cdrom() {
	local remotename
	remotename="$1"
	curl --proto '=https' -q -L -o "$cdrom" "$archive_url/$remotename"
}

cmd_download() {
	local remotename
	remotename="$(\
		curl --proto '=https' -q -L -s -S "$checksum_url" \
		| grep 'live.*amd64' \
		| awk '{ print $2 }' \
	)"

	printf "%s\n" "Found image $remotename."

	if ! [ -f "$cdrom" ]; then
		_download_cdrom "$remotename"
		return 0
	fi

	read -p 'Image already exists! Do you wish to continue? [Ny]: ' -r

	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
		exit 0
	fi

	mv -f -u "$cdrom" "$cdrom.old"
	rm -f "$cdrom"

	_download_cdrom "$remotename"
}

cmd_ssh() {
	local guestip
	guestip="$(_get_ipaddress)"

	if [ -z "$guestip" ]; then
		printf "%s\n" "IP address not found, is the domain up?" >&2
		return 1
	fi

	printf "%s\n" "Connecting to $guestip."

	sshpass -p "$ssh_password" ssh \
		-C \
		-o StrictHostKeyChecking=no \
		-o UserKnownHostsFile=/dev/null \
		-X \
		"$ssh_username@$guestip"
}

cmd_gui() {
	nohup virt-viewer --connect qemu:///session "$vm_name" >/dev/null &
}

cmd_clean() {
	set +e
	virsh destroy "$vm_name"
	set -e
	virsh undefine "$vm_name"
}

cmd_list() {
	virsh list --all
}

cmd_permissions() {
	sudo semanage fcontext "$cdrom" --deleteall
	sudo semanage fcontext -a -t svirt_image_t "$cdrom"
	sudo restorecon -vrF "$cdrom"

	sudo semanage fcontext "$share(/.*)?" --deleteall
	sudo semanage fcontext -a -t svirt_image_t "$share(/.*)?"
	sudo restorecon -vrF "$share"
}

cmd="$1"

_setup_directories

case "$cmd" in
	install)
		cmd_install
		;;
	download)
		cmd_download
		;;
	ssh)
		cmd_ssh
		;;
	gui)
		cmd_gui
		;;
	clean)
		cmd_clean
		;;
	list)
		cmd_list
		;;
	permissions)
		cmd_permissions
		;;
	*)
		printf "%s\n" "Usage: $0 {install,download,ssh,gui,clean,list,permissions}" >&2
		exit 1
esac
